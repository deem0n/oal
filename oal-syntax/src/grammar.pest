//
// Created by intellij-pest on 2021-10-16
// grammar.pest
// Author: ebastien
//

ident = @{ !keyword ~ ASCII_ALPHA ~ ASCII_ALPHANUMERIC* }

let_kw  = @{ "let"  ~ !ASCII_ALPHANUMERIC }
res_kw  = @{ "res"  ~ !ASCII_ALPHANUMERIC }

stmt_kw = { let_kw | res_kw }

num_kw  = @{ "num"  ~ !ASCII_ALPHANUMERIC }
str_kw  = @{ "str"  ~ !ASCII_ALPHANUMERIC }
uri_kw  = @{ "uri"  ~ !ASCII_ALPHANUMERIC }
bool_kw = @{ "bool" ~ !ASCII_ALPHANUMERIC }

type_kw = { num_kw | str_kw | uri_kw | bool_kw }

get_kw     = @{ "get"     ~ !ASCII_ALPHANUMERIC }
put_kw     = @{ "put"     ~ !ASCII_ALPHANUMERIC }
post_kw    = @{ "post"    ~ !ASCII_ALPHANUMERIC }
patch_kw   = @{ "patch"   ~ !ASCII_ALPHANUMERIC }
delete_kw  = @{ "delete"  ~ !ASCII_ALPHANUMERIC }
options_kw = @{ "options" ~ !ASCII_ALPHANUMERIC }
head_kw    = @{ "head"    ~ !ASCII_ALPHANUMERIC }

method_kw = { get_kw | put_kw | post_kw | patch_kw | delete_kw | options_kw | head_kw }

keyword = { stmt_kw | type_kw | method_kw }

var = { ident }

uri_lit = @{ ( ASCII_ALPHANUMERIC | "-" | "." | "_" | "~" | "%" )+ }
uri_var = { "{" ~ prop ~ "}" }
uri_tpl = { ( "/" ~ ( uri_lit | uri_var ) )+ ~ "/"? }
uri_root = @{ "/" }

uri_type = { uri_kw | uri_tpl | uri_root }

prim_type = { num_kw | str_kw | bool_kw  }

prop = { ident ~ expr_type }
object_type = { "{" ~ ( prop ~ ( "," ~ prop )* )? ~ "}" }

array_type = { "[" ~ expr_type ~ "]" }

paren_type = { "(" ~ expr_type ~ ")" }

content_type = { "<" ~ expr_type? ~ ">" }

term_type = { ( prim_type | uri_type | array_type | object_type | content_type | paren_type | var ) ~ inline_ann? }
apply = { ident ~ term_type+ }
app_type = { apply | term_type }

join_type = { app_type ~ ( "&" ~ app_type )* }

any_type = { join_type ~ ( "~" ~ join_type )* }

sum_type = { any_type ~ ( "|" ~ any_type )* }

methods = { method_kw ~ ( "," ~ method_kw )* }
domain = { ( ":" ~ term_type )? }
xfer = { methods ~ domain ~ "->" ~ term_type }

xfer_type = { xfer | sum_type }

rel_type = { term_type ~ "(" ~ xfer_type ~ ( "," ~ xfer_type )* ~ ")" }

expr_type = { rel_type | xfer_type }

binding = { ident }
bindings = { binding* }
decl = { let_kw ~ ident ~ bindings ~ "=" ~ expr_type ~ ";" }

res = { res_kw ~ expr_type ~ ";" }

line = @{ ( !NEWLINE ~ ANY )* }
ann = ${ "#" ~ line }

inline_ann_body = @{ ( !"`" ~ ANY )* }
inline_ann = ${ "`" ~ inline_ann_body ~ "`" }

stmt = { ann | decl | res }

program = { SOI ~ stmt* ~ EOI }

block_comment = _{ "/*" ~ ( block_comment | !"*/" ~ ANY )* ~ "*/" }
line_comment = _{ "//" ~ line }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ line_comment | block_comment }
