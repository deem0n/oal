// Primitive types
let id1 = num;

// Properties
# description: "some parameter"
let prop1 = 'id id1 `title: "some identifier"`;
let prop2 = 'n num;
let prop3 = 'age num;

// Objects
# description: "some stuff"
let obj1 = {
  'firstName str     `title: "First name"`
, 'lastName str      `title: "Last name"`
, 'middleNames [str] `title: "Middle names"`
};

// Templated URIs
let uri1 = /some/path/{ prop1 }/template;

// Undefined URIs
let uri2 = uri;

// Contents
# description: "some content"
let cnt1 = <obj1>;

// Operations
# summary: "does something"
let op1 = patch, put { prop2 } : cnt1 -> cnt1;

# summary: "does something else"
let op2 = get { 'q str } -> cnt1;

// Relations
let rel1 = uri1 ( op1, op2 );

// Joining schemas
let obj2 = obj1 & { prop3 };

// Typed alternative
let id2 = id1 | str;

// Untyped alternative
let any1 = id2 ~ obj2 ~ uri1;

// Function declaration
let f x y = obj2 & ( x | y );
