// Primitive types
let id1 = num;

// Objects
# description: "some stuff"
let rec1 = {
  firstName str,
  lastName str,
  middleNames [str]
};

// Templated URIs
let uri1 = /some/path/{ id id1 }/template;

// Undefined URIs
let uri2 = uri;

// Contents
# description: "some content"
let cnt1 = <rec1>;

// Operations
# summary: "does something"
let op1 = patch, put : cnt1 -> cnt1;

# summary: "does something else"
let op2 = get -> cnt1;

// Relations
let rel1 = uri1 ( op1, op2 );

// Joining schemas (allOf)
let rec2 = rec1 & { age num };

// Typed alternative (oneOf)
let id2 = id1 | str;

// Untyped alternative (anyOf)
let any1 = id2 ~ rec2 ~ uri1;

// Function declaration
let f x y = rec2 & ( x | y );

// Function application
# description: "some other stuff"
let rec3 = f { height num } { stuff any1 };

// Resources
res rel1;
res /something ( get -> rec3 );

/*
 * Block
 * comments
*/
